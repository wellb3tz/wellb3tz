from flask import Flask, request, jsonify
import requests
import random
import time
import urllib3
import json
from datetime import datetime, UTC
from items_database import items  

app = Flask(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

TELEGRAM_API_TOKEN = '7895202892:AAExf3tcGSTcxa8FYb8114iTZ0b9gCVScvY'
TELEGRAM_API_URL = f'https://api.telegram.org/bot{TELEGRAM_API_TOKEN}/'
INVENTORY_FILE = 'user_collections.json'

response = requests.get(TELEGRAM_API_URL + 'getUpdates', verify=False)
updates = response.json()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏–∑ —Ñ–∞–π–ª–∞
def load_collections():
    try:
        with open(INVENTORY_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}
    except json.JSONDecodeError:
        print("Error reading inventory file. Creating backup and starting fresh.")
        from shutil import copy2
        backup_file = f'user_collections_backup_{int(time.time())}.json'
        copy2(INVENTORY_FILE, backup_file)
        return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤ —Ñ–∞–π–ª
def save_collections(collections):
    with open(INVENTORY_FILE, 'w', encoding='utf-8') as f:
        json.dump(collections, f, ensure_ascii=False, indent=2)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
user_collections = load_collections()

def send_message(chat_id, text, reply_markup=None):
    data = {
        'chat_id': chat_id,
        'text': text
    }
    if reply_markup:
        data['reply_markup'] = reply_markup
    
    response = requests.post(
        TELEGRAM_API_URL + 'sendMessage',
        json=data,
        verify=False
    )
    return response.json()

def send_welcome(chat_id):
    welcome_message = """
üéÆ Welcome to 'Unum ad X'! üé≤

Test your luck and discover rare treasures in this collecting game!

üéØ Available Commands:
/loot - Find new items
/collection - View your collection
/miniapp - Open Mini App
/help - Show this help message

Good luck on your adventure! üçÄ
"""
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è Mini App –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    keyboard = {
        "inline_keyboard": [[{
            "text": "üéÆ Open Mini App",
            "web_app": {"url": "https://wellb3tz.github.io/wellb3tz/"}
        }]]
    }
    send_message(chat_id, welcome_message, keyboard)

def loot_item(chat_id, user_id):
    user_id = str(user_id)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ID –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è JSON
    user_collections.setdefault(user_id, {
        'inventory': {},
        'last_loot': None
    })

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª—É—Ç–∞
    current_time = datetime.now(UTC).timestamp()
    last_loot = user_collections[user_id]['last_loot']
    
    if last_loot and current_time - last_loot < 1:  # —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∏
        remaining = int(1 - (current_time - last_loot))
        send_message(chat_id, f"‚è≥ Please wait {remaining} seconds before next loot attempt!")
        return

    # Generate an item
    roll = random.random()
    cumulative_chance = 0

    for item in items:
        cumulative_chance += item["chance"]
        if roll < cumulative_chance:
            user_collections[user_id]['inventory'].setdefault(item["name"], 0)
            user_collections[user_id]['inventory'][item["name"]] += 1
            user_collections[user_id]['last_loot'] = current_time
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            save_collections(user_collections)
            
            send_message(chat_id, f"üéâ You received: {item['name']}!\nChance: {item['chance']*100:.4f}%")
            return

    send_message(chat_id, "üò¢ Unfortunately, you found nothing rare. Try again!")

def show_collection(chat_id, user_id):
    user_id = str(user_id)
    if user_id not in user_collections or not user_collections[user_id].get('inventory'):
        send_message(chat_id, "You don't have any items yet. Type /loot to start collecting!")
        return

    inventory = user_collections[user_id]['inventory']
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
    item_chances = {item['name']: item['chance'] for item in items}
    sorted_items = sorted(inventory.items(), 
                         key=lambda x: item_chances.get(x[0], 0))

    response = "üóÇ Your inventory:\n\n"
    for item_name, count in sorted_items:
        response += f"{item_name} ‚Äî {count} pcs\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_items = sum(inventory.values())
    unique_items = len(inventory)
    response += f"\nüìä Statistics:\n"
    response += f"Total items: {total_items}\n"
    response += f"Unique items: {unique_items}/{len(items)}"
    
    send_message(chat_id, response)

def send_help(chat_id):
    help_message = """üìú Commands:
/start ‚Äî Start the game
/loot ‚Äî Try your luck to find an item
/inventory ‚Äî View your inventory
/miniapp ‚Äî Open Mini App interface
/help ‚Äî Get help and information
"""
    keyboard = {
        "inline_keyboard": [[{
            "text": "üéÆ Open Mini App",
            "web_app": {"url": "https://wellb3tz.github.io/wellb3tz/"}
        }]]
    }
    send_message(chat_id, help_message, keyboard)

def setup_mini_app(chat_id):
    keyboard = {
        "inline_keyboard": [[{
            "text": "üéÆ Open Mini App",
            "web_app": {"url": "https://wellb3tz.github.io/wellb3tz/"}
        }]]
    }
    send_message(chat_id, "Click the button below to open the Mini App:", keyboard)

@app.route('/loot', methods=['POST'])
def web_loot():
    try:
        data = request.json
        user_id = str(data['user_id'])
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        user_collections = load_collections()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        user_collections.setdefault(user_id, {
            'inventory': {},
            'last_loot': None
        })

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª—É—Ç–∞
        current_time = datetime.now(UTC).timestamp()
        last_loot = user_collections[user_id]['last_loot']
        
        if last_loot and current_time - last_loot < 1:  # —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∏
            return jsonify({
                'error': 'Please wait before next loot attempt!'
            }), 429

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç
        roll = random.random()
        cumulative_chance = 0

        for item in items:
            cumulative_chance += item["chance"]
            if roll < cumulative_chance:
                user_collections[user_id]['inventory'].setdefault(item["name"], 0)
                user_collections[user_id]['inventory'][item["name"]] += 1
                user_collections[user_id]['last_loot'] = current_time
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                save_collections(user_collections)
                
                return jsonify({
                    'item_name': item['name'],
                    'chance': item['chance']
                })

        return jsonify({
            'error': 'No item found'
        }), 404

    except Exception as e:
        return jsonify({
            'error': str(e)
        }), 500

def main():
    print("Bot started...")
    offset = None
    
    while True:
        try:
            params = {'timeout': 30}
            if offset:
                params['offset'] = offset

            response = requests.get(TELEGRAM_API_URL + 'getUpdates', params=params, verify=False)
            updates = response.json()['result']

            for update in updates:
                offset = update['update_id'] + 1

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                print(f"Received update: {json.dumps(update, indent=2)}")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ web_app_data (–∏–∑–º–µ–Ω–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å)
                if 'message' in update:
                    message = update['message']
                    chat_id = message['chat']['id']
                    user_id = message['from']['id']

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ web_app_data
                    if 'web_app_data' in message:
                        print(f"Received web_app_data: {message['web_app_data']}")
                        data = message['web_app_data']['data']
                        if data == '/loot':
                            print(f"Processing loot command from web_app for user {user_id}")
                            loot_item(chat_id, user_id)
                        continue

                    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                    if 'text' in message:
                        text = message['text']
                        if text == '/start':
                            send_welcome(chat_id)
                        elif text == '/loot':
                            loot_item(chat_id, message['from']['id'])
                        elif text == '/inventory':
                            show_collection(chat_id, message['from']['id'])
                        elif text == '/help':
                            send_help(chat_id)
                        elif text == '/miniapp':
                            setup_mini_app(chat_id)

        except Exception as e:
            print(f"Error occurred: {e}")
            time.sleep(5)
            continue

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
    main()